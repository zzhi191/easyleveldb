{
  "name": "fast-future",
  "version": "1.0.1",
  "description": "A really fast way to run a callback in the future",
  "main": "fast-future.js",
  "scripts": {
    "test": "tape test.js"
  },
  "author": {
    "name": "David Björklund",
    "email": "david.bjorklund@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "tape": "~2.13.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kesla/fast-future.git"
  },
  "bugs": {
    "url": "https://github.com/kesla/fast-future/issues"
  },
  "homepage": "https://github.com/kesla/fast-future",
  "readme": "# fast-future[![build status](https://secure.travis-ci.org/kesla/fast-future.png)](http://travis-ci.org/kesla/fast-future)\n\nA really fast way to run a callback in the future\n\n[![NPM](https://nodei.co/npm/fast-future.png?downloads&stars)](https://nodei.co/npm/fast-future/)\n\n[![NPM](https://nodei.co/npm-dl/fast-future.png)](https://nodei.co/npm/fast-future/)\n\n## Installation\n\n```\nnpm install fast-future\n```\n\n## What? How does is work?\n\nSince node.js v0.10.x the semantics of `process.nextTick` changed (see [docs](http://nodejs.org/docs/v0.10.12/api/process.html#process_process_nexttick_callback)). To get the old behaviour one can use setImmediate instead.\n\nThe good part about `process.nextTick` is that it's really really fast. The bad part is that event loop can be starved and if run for to long time it'll eventually die with a `RangeError: Maximum call stack size exceeded`.\n\nWhat's good about `setImmediate` is that it won't starve the event loop. However, it's a bit slower than `process.nextTick`.\n\n_fast-future_ uses the best from the both worlds - the callback will most of the times be called in a process.nextTick, but once in a while it'll get run in a `setImmediate` - so you'll get crazy performance, and the event loop won't get starved or crash or something sad like that.\n\nFor me running the benchmarks show the following result\n\n```\n# setImmediate\nsetImmediate: 2317ms\n# fastFuture\nfastFuture: 96ms\n```\n\nFor node v0.8.x it'll fallback to using process.nextTick\n\n## Example\n\n```javascript\nvar fastFuture = require('./fast-future')()\n\nfastFuture(function () {\n  console.log('this is being run in the future')\n})\n```\n\n## Kudos\n\nThanks @mafintosh for suggesting this!\n\n## Licence\nCopyright (c) 2014 David Björklund\n\nThis software is released under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "_id": "fast-future@1.0.1",
  "_shasum": "6cbd22d999ab39cd10fc79392486e7a678716818",
  "_from": "fast-future@>=1.0.0 <1.1.0",
  "_resolved": "http://registry.cnpmjs.org/fast-future/download/fast-future-1.0.1.tgz"
}
